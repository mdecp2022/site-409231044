<h1>About</h1>
<p>40923104 江宜珊 四設三甲</p>
<p>倉儲連結:<a href="https://github.com/mdecp2022/site-409231044">409231044</a></p>
<p>靜態網站:<a href="https://mdecp2022.github.io/site-409231044/content/index.html">site-40923104</a></p>
<p>//</p>
<p>課程的公布欄:<a href="https://wcms.repl.co/get_page/%E5%85%AC%E4%BD%88%E6%AC%84">mde.tw</a></p>
<p>課程teams:<a href="https://teams.microsoft.com/_#/school/conversations/%E4%B8%80%E8%88%AC?threadId=19:scJr0bhZFkj4y_XvuILrE5rjXkeZJ9Bd_UsmCpj5Wh81@thread.tacv2&amp;ctx=channel">cp2022 teams</a></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2">&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</textarea></div>
<div style="width: 100%; height: 100%;"></div>
<div style="width: 100%; height: 100%;"></div>
<h1>CP2022</h1>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2">
<pre></pre>
<h2>W4</h2>
<p>學會用.replit同步個人倉儲,進入倉儲修改其內容,也可以直接推到遠端</p>
<p>先進入.replit點選run</p>
<p><img alt="" height="235" src="/images/S__201777156.jpg" width="513"/></p>
<p>接著複製自己的倉儲連結網址,進入倉儲</p>
<p><img alt="" height="240" src="/images/螢幕擷取畫面 (10).png" width="510"/></p>
<p>編輯完頁面後,按save,轉靜態</p>
<p><img alt="" height="246" src="/images/S__201785346.jpg" width="523"/></p>
<p>接著再回到<span>.replit push自己的內容</span></p>
<p><span><img alt="" height="245" src="/images/S__201801730.jpg" width="523"/></span></p>
</div>
<h2>W5</h2>
<p>設定SSH和Key,還有倉儲改版的設定</p>
<p><img alt="" height="242" src="/images/S__199467010.jpg" width="451"/></p>
<p><img alt="" height="392" src="/images/1671028292989.jpg" width="416"/></p>
<h2>W8~9</h2>
<p>期中考周</p>
<h2>W10</h2>
<p>因電腦的ipv6連線設定有問題 而導致隨堂考試沒辦法準時登入</p>
<p>分小組 6個人一組</p>
<h2>W11</h2>
<p>因運動會 所以不上課</p>
<p>乙班有用JSON檔統計上缺考的人</p>
<h2>W12</h2>
<p>因為準備比賽所以缺考考試</p>
<p></p>
<h1>HW</h1>
<h2>w5</h2>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/95de27a3e1ca855eb869a163f6c59c25/raw/d4d986d81c23ea42cad3cd5a061e2f36010d57a3/w5">網頁連結</a></p>
<p></p>
<p>在自己Brython的地方加上在自己Github Gist建立的程式碼</p>
<p><img alt="" height="240" src="/images/S__204095490.jpg" width="488"/></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefghkmnpqrstuwxyz123456789"
# 利用重複迴圈呼叫 password_generator() 函式 10 次
for i in range(10):
    print(password_generator(4, pass_string))</pre>
<h2>w6</h2>
<p>利用程式碼跑出修課的人員名單</p>
<p>以下為實際操作的截圖及連結</p>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/91b23704f51766dc29cdc450adc57256/raw/8eb8cb954a908215e3c4a44252e0ff90eec99a5f/w6">1a名單</a></p>
<p><img alt="" height="244" src="/images/S__204103683.jpg" width="515"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
  
brython_div1 = document["brython_div1"]
"""
brython_div1 &lt;= html.BUTTON("hello")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= html.A("google", href="https://google.com")
"""
  
url = "https://mde.tw/studlist/2022fall/1a.txt"
data = open(url).read().split("\n")
mdecp2022 = "https://mdecp2022.github.io/site-"
data = data[1:-1]
for i in data:
    stud = i.split("\t")
    stud_num = stud[0]
    github_acc = stud[1]
    #print(stud_num, github_acc)
    if github_acc == "":
        github_acc = stud_num
    site = mdecp2022 + github_acc
    link = html.A(stud_num, href=site)
    brython_div1 &lt;= link
    brython_div1 &lt;= html.BR()</pre>
<h2>w10</h2>
<h3>hw10-1</h3>
<p>下方是做出來的連結</p>
<div><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/71eeb2003ad2ab07be4bf71051fbe450/raw/cbb1a791cecc74c20bc8705e6a25a9c8b9b957d9/w10_hw1">1a連結</a></div>
<div></div>
<div></div>
<h3>hw10-2</h3>
<div>
<p>心得:我有自己試寫了程式便去試試看怎樣才能使結果變成可以直接<span>輸出 1, 3, 5, 7, 9</span><span>不會跳行,但還沒找出為甚麼跳行的原因,以下有實際操作的截圖</span></p>
<p>(自己修改的程式以及解釋)</p>
<div>
<div>a = ""<br/>for i in range(1, 10, 2):  --------從1開始到小於10的數字,並每一次增量2<br/> print(a + str(i) + ",")  ------------------數字顯示不跳行,並以逗號隔開<br/>print(a)</div>
<div></div>
<div>1.這是一開始一直失敗的畫面</div>
<div><img alt="" height="196" src="/images/1671030729682.jpg" width="308"/></div>
<div></div>
<div>2.後來稍微成功,但數字會同時顯示兩次</div>
<div><img alt="" height="163" src="/images/1671030241788.jpg" width="273"/></div>
<div></div>
<div>3.後來成功一半的畫面,但是有換行的部分</div>
<div><img alt="" height="188" src="/images/1671030705786.jpg" width="287"/></div>
</div>
<p>///////////// 老師上課內容 //////////////</p>
<div>
<div>a = ""<br/> for i in range(1, 10, 1):<br/> a + str(i) + ","<br/> print(a)</div>
<div>
<div></div>
<div>
<div># 1, 3, 5, 7, 9</div>
<div>如何修改上列程式, 可以輸出 1, 3, 5, 7, 9</div>
<div></div>
<h2>w11</h2>
<div>
<div>w11 作業:</div>
<ol>
<li>請問 w11 週小考有幾人缺考?</li>
<li>請問 w11 週小考平均分數多少?</li>
</ol>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/b93cdfeb42b377edbb52dcd1c7ad0e36/raw/5e30a3bd77f9718ee1bd591c4afe0a666a693e48/w11">w10小考結果</a></p>
<p>以下為 w10 缺考名單:<br/>40823116<br/>40823139<br/>40823241<br/>40923102<br/>40923104<br/>40923140<br/>40923144<br/>40923150<br/>40923152<br/>40923156<br/>41123119<br/>41123121<br/>41123122<br/>41123127<br/>41123133<br/>41123143<br/>41123146<br/>41123149<br/>41123150<br/>41123152</p>
<p>p.s. 那時候我在自己電腦上考試,但因為proxy有問題,而導致沒辦法於時間內進入考試網站完成考試因此缺考了</p>
</div>
</div>
</div>
</div>
</div>
<h2>w12</h2>
<h3>hw12-1</h3>
<p> <a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/853d16b9c7b450ff0fde9c6439700e8a/raw/e029600d54e6149da01c413ce015173ac3885f86/w12_hw1.py">hw1</a> (有做出來的連結)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
print(type(user_input_temp))</pre>
<p>//// 在自己的倉儲中新增w12_hw1.py的New Gist /////</p>
<p><img alt="" height="179" src="/images/1671119400391.jpg" width="712"/></p>
<h3>hw1-1</h3>
<p><span>將超連結加入,使其需按下下方按鈕才能輸入值</span></p>
<!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
-->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
</script>
<!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--></p>
<!-- 利用 html 建立一個 id="btn1" 的按鈕 -->
<p><button id="btn1">取使用者輸入</button></p>
<div id="brython_div"></div>
<div></div>
<p>
<script type="text/python">
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div <= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    brython_div <= user_input_temp
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
</script>
</p>
<h3>hw12-2</h3>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/853d16b9c7b450ff0fde9c6439700e8a/raw/c44c5fa0632a51eab1246d394b1d78aae28177f4/w12_hw2.py">hw2</a> <span>(有做出來的連結)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
print(type(user_input_temp))
# 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數
user_input_temp = float(user_input_temp)
# 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值
Fahrenheit = (user_input_temp*9/5) + 32
# 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數
# 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串
print("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.")</pre>
<p><span>//// 在自己的倉儲中新增w12_hw2.py的New Gist /////</span></p>
<p><img alt="" height="291" src="/images/1671120039411.jpg" width="541"/></p>
<h3>hw2-1</h3>
<p><span>將超連結加入,使其需按下下方按鈕才能輸入值</span></p>
<p><!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
-->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
</script>
<!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--></p>
<p><!-- 利用 html 建立一個 id="btn1" 的按鈕 --></p>
<p><button id="btn1">取使用者輸入</button></p>
<div id="brython_div"></div>
<h2>w13</h2>
<h3>hw13-1</h3>
<div>在這邊我們寫了一個程式,點開下方的連結後會發現跳出一個輸入溫度值的框框,接著輸入值後即可在下方看到輸入的值</div>
<div></div>
<div><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/575bc410a1e21ecbdcac6137d51a5e08/raw/e3ba827f7a5f3ec986447a5f247465982eedde06/w13">溫度1</a></div>
<div></div>
<div>於輸入溫度值的框框內輸入數值</div>
<div><img alt="" height="275" src="/images/S__204103687.jpg" width="450"/></div>
<div></div>
<div>接著就可以在下方看到輸出值的內容<img alt="" height="393" src="/images/S__204103686.jpg" width="657"/></div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
f=c*9/5+32
c=(f-32)*5/9
'''
c=input("請輸入攝氏溫度值")
print(c,type(c))</pre>
</div>
<div></div>
<div>
<h3>hw13-2</h3>
</div>
<div>基本上跟13-1差不多,但在這裡的程式是可以將我們輸入在溫度值框框的值轉換成華氏的溫度</div>
<div></div>
<div><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/575bc410a1e21ecbdcac6137d51a5e08/raw/e3ba827f7a5f3ec986447a5f247465982eedde06/w13-2">溫度2</a></div>
<div><span>於輸入溫度值的框框內輸入數值</span></div>
<div><span><img alt="" height="293" src="/images/S__204103685.jpg" width="512"/></span></div>
<div><span>接著就可以在下方看到輸出值將溫度轉換成華氏的</span></div>
<div><span><img alt="" height="313" src="/images/S__204103688.jpg" width="522"/></span></div>
<div></div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
f = c*9/5 + 32
c = (f-32)*5/9
'''
c = input("請輸入攝氏溫度值")
#print(type(c))
c = float(c)
print("請輸入攝氏溫度: " +str(c), "等於華氏溫度: " + str(c*9/5 +32))</pre>
</div>
<h2>w14</h2>
<p><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/57c0d812f8a14fc153aa9638215bff01/raw/032f4e5b4cc3635916dd0a30bde0867b7df632d4/w14">w14考試結果</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 ast 模組是希望利用其 literal_eval() 將 dict 格式的字串轉為 dict 資料型別
# 以利隨後的取值運算
import ast
# 設計一個 quiz 類別, 其中有兩個成員變數與兩個成員函式
class quiz:
    def __init__(self, cname, url):
        self.cname = cname
        self.url = url
    # 定義一個函式, 以班級代號字串作為輸入, 可以傳回各班修課學員的學號數列
    def get_stud(self):
        # 將課程的班級代號字串作為 dict 的 key, 而 2022 fall 的課程代號作為對應值
        # 使用者可以利用班級代號從 courses dict 取出課程代號
        courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}
        # 利用 c_name 從 courses 得到該學期的課程代號
        c = courses[self.cname]
        # 利用課程代號從學校教務主機取的該班修課人員名單
        curl = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + c + "&amp;column=True"
        # 讀出各修課人員資料後, 以跳行符號切割, 得到的 data 為數列
        data = open(curl).read().split("\n")
        # 因為最後一筆資料為空字串, 因此利用數列運算將其去除
        stud = data[:-1]
        # get_stud() 函式最後將對應班級的修課人員學號以數列格式傳回
        return stud
         
    def get_score(self):
        # 利用 open() 與 read() 讀取考試結果 JSON 檔案
        json_data = open(self.url).read()
        # 利用 ast.literal_eval() 將字串 dict, 轉為程式可用的 dict 資料型別
        big_dict = ast.literal_eval(json_data)
        # 從 big_dict 中, 取出 body 中的 testuser 欄位資料
        data = big_dict["body"]["testuser"]
        # 定義一個空 dict 資料變數, 隨後利用迴圈逐一將學號作為 key, 考試成績為 valude
        # 組成 quiz_dict 的資料內容, 以便之後可以用學號當作輸入, 取得該員考試成績
        quiz_dict = {}
        for i in data:
            # data 資料中的 user_name 為考試學員的帳號, 也就是學號
            stud_id = data[i]["user_name"]
            # data 資料中的 total_score 欄位為考試成績
            # 因為考試成績為字串, 先轉為浮點數後, 再轉為整數
            stud_score = int(float(data[i]["total_score"]))
            # 逐一以學號為 key, 考試成績為對應 value, 將資料放入 quiz_dict
            quiz_dict[stud_id] = stud_score
        # 取得各學員的考試成績 quiz_dict 後, 將資料傳回
        return quiz_dict
url = "https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/a48d36ae883bde8efd07b25bfddaed8f13200353/2022_1209_cp_w14_1a_quiz.json"
cpb_w14 = quiz("1a", url)
# 利用 "1b" 作為輸入從 get_stud() 取出該班修課學員學號數列
cp_stud = cpb_w14.get_stud()
cp_score = cpb_w14.get_score()
print(cp_score)</pre>
<h2>w15</h2>
<p>回答以下問題:</p>
<div>
<p>Q1:為何學習計算機程式需要建立個人倉儲?</p>
<p>A1:透過個人倉儲可以看到每個人的版本跟每一次改版的內容記錄<span>，</span>還有可以去學習並下載其他人對於程式的破解檔<span>。</span></p>
<p></p>
<p><span>Q2:</span>全球資訊網能夠提供甚麼功能或有什麼優點?</p>
<p><span>A2:是資訊時代發展的核心，<span>主要是文字檔案格式化和超文件（HTML），還可能包含圖片、影片、聲音和軟體元件，使其呈現為多媒體內容的連貫頁面。</span></span></p>
<p><span><span></span></span></p>
<p><span>Q3:</span>Replit, stud.cycu.org 與 localhost 分別代表甚麼?</p>
<p><span>A3:Replit是可以直接連結到自己的倉儲，並修改</span></p>
<p><span></span></p>
<p><span>Q4:</span>https, ssh 到底提供使用者那些功能或優點?</p>
<p><span>A4:可以快速地將訊息推送到遠端</span></p>
<p><span></span></p>
<p><span>Q5:</span>Brython 與 Python 有甚麼差別?</p>
<p><span>A5: Python是程式語言</span></p>
<p><span></span></p>
<p><span>Q6:</span>能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼?</p>
<p><span>A6:你會寫程式了，也看得懂程式碼在寫甚麼</span></p>
<p><span></span></p>
<p><span>Q7:</span>變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼?</p>
</div>
<h2>w16</h2>
<div></div>
<div><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/b1c67aab648d225e8f5881f754bcfd78/raw/38aa0887036c4c01e0da643e297325012a2cf4ab/w15">綠色方塊行走模擬</a></div>
<div></div>
<div></div>
<div>(快要成功)</div>
<div>還沒成功,有不斷去試,但因為美改一個地方讓程式去執行的時候,就會發現後面一直顯示錯誤,還需再認真研究看看試哪裡有問題</div>
<div><a href="/get_page/Brython?src=https://gist.githubusercontent.com/409231044/b1c67aab648d225e8f5881f754bcfd78/raw/abaa2f7bc1696579955feaf458cfe4923ae13709/w15_3">綠色方塊行走加開始按鈕</a></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<p>
<script type="text/python">
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div <= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    brython_div <= user_input_temp
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
</script>
</p>